// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Lykke.Service.FeeCalculator.AutorestClient
{
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for FeeCalculatorAPI.
    /// </summary>
    public static partial class FeeCalculatorAPIExtensions
    {
            /// <summary>
            /// Checks service is alive
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static object IsAlive(this IFeeCalculatorAPI operations)
            {
                return operations.IsAliveAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Checks service is alive
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> IsAliveAsync(this IFeeCalculatorAPI operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.IsAliveWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='clientId'>
            /// </param>
            /// <param name='assetPair'>
            /// </param>
            /// <param name='assetId'>
            /// </param>
            /// <param name='orderAction'>
            /// Possible values include: 'Buy', 'Sell'
            /// </param>
            public static object GetMarketOrderFee(this IFeeCalculatorAPI operations, string clientId = default(string), string assetPair = default(string), string assetId = default(string), OrderAction? orderAction = default(OrderAction?))
            {
                return operations.GetMarketOrderFeeAsync(clientId, assetPair, assetId, orderAction).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='clientId'>
            /// </param>
            /// <param name='assetPair'>
            /// </param>
            /// <param name='assetId'>
            /// </param>
            /// <param name='orderAction'>
            /// Possible values include: 'Buy', 'Sell'
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetMarketOrderFeeAsync(this IFeeCalculatorAPI operations, string clientId = default(string), string assetPair = default(string), string assetId = default(string), OrderAction? orderAction = default(OrderAction?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetMarketOrderFeeWithHttpMessagesAsync(clientId, assetPair, assetId, orderAction, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='clientId'>
            /// </param>
            /// <param name='assetPair'>
            /// </param>
            /// <param name='assetId'>
            /// </param>
            /// <param name='orderAction'>
            /// Possible values include: 'Buy', 'Sell'
            /// </param>
            public static object GetLimitOrderFee(this IFeeCalculatorAPI operations, string clientId = default(string), string assetPair = default(string), string assetId = default(string), OrderAction? orderAction = default(OrderAction?))
            {
                return operations.GetLimitOrderFeeAsync(clientId, assetPair, assetId, orderAction).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='clientId'>
            /// </param>
            /// <param name='assetPair'>
            /// </param>
            /// <param name='assetId'>
            /// </param>
            /// <param name='orderAction'>
            /// Possible values include: 'Buy', 'Sell'
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetLimitOrderFeeAsync(this IFeeCalculatorAPI operations, string clientId = default(string), string assetPair = default(string), string assetId = default(string), OrderAction? orderAction = default(OrderAction?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetLimitOrderFeeWithHttpMessagesAsync(clientId, assetPair, assetId, orderAction, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
